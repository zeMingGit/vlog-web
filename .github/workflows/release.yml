name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm install

      - name: Build project
        run: npm run build

      - name: Zip dist folder
        run: zip -r dist.zip .vitepress/dist/

      - name: Run semantic-release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

      - name: Create release PR branch and commit artifacts
        run: |
          TIMESTAMP=$(date +%s)
          BRANCH_NAME="release-artifacts-$TIMESTAMP"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

          git config user.name "semantic-release[bot]"
          git config user.email "bot@users.noreply.github.com"

          git checkout -b "$BRANCH_NAME"
          git add CHANGELOG.md package.json
          git commit -m "chore: release artifacts [skip ci]" || echo "No changes to commit"
          git push --set-upstream origin "$BRANCH_NAME"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: main
          branch: ${{ env.BRANCH_NAME }}
          title: "chore: release artifacts"
          body: "This PR contains automatically generated CHANGELOG.md and updated package.json"
          commit-message: "chore: release artifacts [skip ci]"
          draft: false
          delete-branch: true

      - name: Attempt auto-merge PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${process.env.BRANCH_NAME}`,
              state: 'open'
            });

            if (prs.data.length > 0) {
              const pr = prs.data[0];
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                merge_method: 'squash'
              });
              console.log(`✅ Auto-merged PR #${pr.number}`);
            } else {
              console.log("⚠️ No open PR found to auto-merge.");
            }
